/**
 * import modules
 */
import {relative} from 'path';
import gulp from 'gulp';
{{#is spriteType 'svg'}}
import buildSprite from '@hidoo/gulp-task-build-sprite-svg';
{{/is}}
{{#is spriteType 'image'}}
import buildSprite from '@hidoo/gulp-task-build-sprite-image';
{{/is}}

/**
 * import modules - local
 */
import * as config from '../config';

/**
 * url parameter for browser cache
 * @type {String}
 */
const cacheParameter = process.env.NODE_ENV === 'development' ? // eslint-disable-line no-process-env
  '' : `?version=${config.pkg.version}`;

/**
 * relative path from css to sprite
 * @type {String}
 */
{{#if multiDevice}}
const pathToSpriteDesktop = relative(config.path.destCssDesktop, config.path.destSpriteDesktop); // eslint-disable-line max-len
const pathToSpriteMobile = relative(config.path.destCssMobile, config.path.destSpriteMobile); // eslint-disable-line max-len
{{else}}
const pathToSprite = relative(config.path.destCss, config.path.destSprite);
{{/if}}

{{#if multiDevice}}
/**
 * return merged build options for desktop
 * @param {Object} options build task options
 * @return {Object}
 */
function buildDesktopOptions(options = {}) {
  return {
    ...options,
    destImg: config.path.destSpriteDesktop,
    destCss: config.path.srcCssDesktop,
    imgPath: `${pathToSpriteDesktop}/${options.imgName}${cacheParameter}`,
    cssPreprocessor: '{{#is cssPreprocessor 'sass'}}scss{{else}}stylus{{/is}}',
    compress: config.compress
  };
}

/**
 * return merged build options for mobile
 * @param {Object} options build task options
 * @return {Object}
 */
function buildMobileOptions(options = {}) {
  return {
    ...options,
    destImg: config.path.destSpriteMobile,
    destCss: config.path.srcCssMobile,
    imgPath: `${pathToSpriteMobile}/${options.imgName}${cacheParameter}`,
    cssPreprocessor: '{{#is cssPreprocessor 'sass'}}scss{{else}}stylus{{/is}}',
    compress: config.compress
  };
}
{{else}}
/**
 * return merged build options
 * @param {Object} options build task options
 * @return {Object}
 */
function buildOptions(options = {}) {
  return {
    ...options,
    destImg: config.path.destSprite,
    destCss: config.path.srcCss,
    imgPath: `${pathToSprite}/${options.imgName}${cacheParameter}`,
    cssPreprocessor: '{{#is cssPreprocessor 'sass'}}scss{{else}}stylus{{/is}}',
    compress: config.compress
  };
}
{{/if}}

{{#if multiDevice}}

  // define main task
  const mainDesktop = buildSprite(buildDesktopOptions({
    name: 'sprite:desktop:main',
    src: `${config.path.srcSpriteDesktop}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`,
    imgName: 'sample.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}',
    cssName: '_sprite_sample.{{#is cssPreprocessor 'sass'}}scss{{else}}styl{{/is}}',
    {{#is spriteType 'image'}}
      evenize: false,
    {{/is}}
  }));
  const mainMobile = buildSprite(buildMobileOptions({
    name: 'sprite:mobile:main',
    src: `${config.path.srcSpriteMobile}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`,
    imgName: 'sample.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}',
    cssName: '_sprite_sample.{{#is cssPreprocessor 'sass'}}scss{{else}}styl{{/is}}',
    {{#is spriteType 'image'}}
      evenize: false,
    {{/is}}
  }));

  // define watch task
  const watchDesktop = () => {
    gulp.watch(
      [
        `${config.path.srcSpriteDesktop}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`
      ],
      mainDesktop
    );
  };
  const watchMobile = () => {
    gulp.watch(
      [
        `${config.path.srcSpriteMobile}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`
      ],
      mainMobile
    );
  };

  // export tasks
  export const desktop = {
    main: mainDesktop,
    watch: watchDesktop
  };
  export const mobile = {
    main: mainMobile,
    watch: watchMobile
  };

{{else}}

  // define main task
  export const main = buildSprite(buildOptions({
    name: 'sprite:main',
    src: `${config.path.srcSprite}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`,
    imgName: 'sample.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}',
    cssName: '_sprite_sample.{{#is cssPreprocessor 'sass'}}scss{{else}}styl{{/is}}',
    {{#is spriteType 'image'}}
      evenize: false,
    {{/is}}
  }));

  // define watch task
  export const watch = () => {
    gulp.watch(
      [
        `${config.path.srcSprite}/**/sample-*.{{#is spriteType 'svg'}}svg{{/is}}{{#is spriteType 'image'}}png{{/is}}`
      ],
      main
    );
  };

{{/if}}
